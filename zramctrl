#!/bin/bash

# Function to write values of composed variables easily
set_comp_var() {
  local var_name="$1"
  local index="$2"
  local value="$3"
  local var_name_comp="${var_name}${index}"
  declare -g "$var_name_comp=$value"
}

# Function to read the value of composed variables easily
get_comp_var() {
  local var_name="$1"
  local index="$2"
  local var_name_comp="${var_name}${index}"
  echo "${!var_name_comp}"
}

if [ -f /etc/zramswap.conf ]; then
  source /etc/zramswap.conf
fi

start() {
  if [ -z "$ZRAM_DISKS_NUM" ]; then
    ZRAM_DISKS_NUM=1
  fi
  modprobe zram num_devices=$ZRAM_DISKS_NUM

  ZRAM_DISKS_NUM=$((ZRAM_DISKS_NUM - 1))

  for ((i = 0; i <= ZRAM_DISKS_NUM; i++)); do
    if [ -n "$(get_comp_var ZRAM_DISK_SIZE $i)" ]; then
      MEM="$(get_comp_var ZRAM_DISK_SIZE $i)"
    else
      if [ ! "$(get_comp_var ZRAM_SIZE_PERCENT $i)" ]; then
        set_comp_var ZRAM_SIZE_PERCENT $i 20
      fi
      (( MEM_TOTAL= `cat /proc/meminfo | grep MemTotal | awk '{print $2}'` * 1024 ))
      (( MEM= MEM_TOTAL * "$(get_comp_var ZRAM_SIZE_PERCENT $i)" / 100 ))
    fi

    if [ -n "$(get_comp_var ZRAM_COMPRESSION_ALGO $i)" ]; then
      echo "$(get_comp_var ZRAM_COMPRESSION_ALGO $i)" > "/sys/block/zram$i/comp_algorithm"
    fi

    if [ -n "$(get_comp_var ZRAM_WRITEBACK_DEV $i)" ]; then
      if [[ ! -z $(swapon | grep "$(get_comp_var ZRAM_WRITEBACK_DEV $i)") ]]; then
        swapoff "$(get_comp_var ZRAM_WRITEBACK_DEV $i)"
      fi
      echo "$(get_comp_var ZRAM_WRITEBACK_DEV $i)" > "/sys/block/zram$i/backing_dev"
    fi

    echo $MEM > "/sys/block/zram$i/disksize"

    if [ -n "$(get_comp_var ZRAM_MEM_LIMIT $i)" ]; then
      echo "$(get_comp_var ZRAM_MEM_LIMIT $i)" > "/sys/block/zram$i/mem_limit"
    fi

    mkswap "/dev/zram$i" -L "zram$i"
    swapon -p 100 "/dev/zram$i"
  done
}

stop() {
  if [ -z "$ZRAM_DISKS_NUM" ]; then
    ZRAM_DISKS_NUM=1
  fi
  ZRAM_DISKS_NUM=$((ZRAM_DISKS_NUM - 1))
  for ((i = 0; i <= ZRAM_DISKS_NUM; i++)); do
    swapoff "/dev/zram$i"
  done
  rmmod zram
}

case $1 in
  start|stop) "$1" ;;
esac
